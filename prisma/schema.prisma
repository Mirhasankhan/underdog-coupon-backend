// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userName  String
  email     String    @unique
  password  String 
  phone     String?
  role      UserRole  @default(USER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  payments  Payment[] // One-to-many relationship
  cards     Card[]
  notifications     Notification[]

  @@map("users")
}


model Coupon {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  plan        CouponPlan
  couponName  String
  code        String    @unique
  activeFrom  DateTime
  activeTo    DateTime
  limitNumber Int
  used        Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("coupons")
}

enum CouponPlan {
  BASIC
  PREMIUM
}


model Payment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  amount      Float
  currency    String
  planType        CouponPlan
  stripeId    String  @unique
  createdAt   DateTime @default(now())
  codes      String[]

  user        User     @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Restaurant {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl      String
  videoUrl      String?  
  restaurantName String
  contact       String
  location      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  reviews       Review[]

  @@map("restaurants")
}

model Card {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  cardNumber String @unique
  holderName String
  endMonth   Int
  endYear    Int
  cvc        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("cards")
}


model Review {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userName     String
  restaurantId String   
  rating       Int      
  comment      String?
  createdAt    DateTime @default(now())

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade) 

  @@map("reviews")
}
model Notification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  message      String 
  userId       String    @db.ObjectId 
  createdAt    DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}


model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otpCode   String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserRole {
  ADMIN
  USER
}
